hplp: code for communicating with recent HP calculators
=======================================================

hplp (still entirely in libhpcalcs for now) is the beginning of a toolkit for
two-way communications with HP Prime calculators.

Status (2013/12/09)
-------------------
The code base does:
* work on Windows, Linux and MacOS X;
* support communication with a single Prime calculator connected to the
  computer. The communication is known to work with the "SDKV0.30" firmware
  version from mid-August 2013, and seems to work with the "SDKV0.32" firmware
  version from late November 2013, but might not work with other older or
  newer versions, if HP performs backwards-incompatible changes in the
  protocol (like TI does);
* implement eight operations (without _known_ bugs): ready check,
  get calculator information, set date and time, receive screenshot, send file,
  receive file, receive backup, send key;
* provide a terminal-based UI: the test program "test_hpcalcs".

The code base doesn't:
* perform color conversion on PNG screenshots (libhpcalcs should depend on
  libpng to uncompress the files, and recompress them after mangling);
* provide a way to select one of multiple HP calculators (probing USB
  devices);
* provide a user-friendly GUI for the above, but a GUI can definitely build
  upon the library easily enough;
* implement _proper_ conversion from UTF-16 LE to other charsets on its own:
  that's a task for libicu, Qt or other libraries.

Goals
-----
Laying the groundwork for GUIs dealing with two-way communication with HP
Prime calculators, and possibly 39gII (Prime and 39gII are similar), using
USB HID class, and possibly later fake MSD for firmware upgrades.

Non-goals
---------
As far as I'm concerned, working _by myself_ on:
* duplicating / replacing code targeting older, non-USB HID-based HP
  calculators;
* a GUI comparable to HP's Connectivity Kit. However, other people should
  obviously do it, in order to make the software much more usable !

Technical notes
---------------
The code leverages HIDAPI, and it was strongly inspired by the time-proven
concepts and APIs of the libti* family, which I (Lionel Debroux) am the
current maintainer of.
The GPL'ed libti* family ( https://github.com/debrouxl/tilibs ) forms the
back-end for TILP, TIEmu, TilEm and titools (mainly), and contains the only
third-party portable FLOSS code with two-way communication support for all
three series of TI-Z80, TI-68k and TI-Nspire graphing calculators.
Putting together framework strongly inspired by libti* clearly took some work,
but having such a foundation saves time in the longer term. IOW, it's worth
the apparent complexity.

Obviously, until the calculator's protocol is better documented, the API
will change in backwards-incompatible manners (for instance, the output
parameters of check ready and get infos operations).

Build process
-------------
The build process is that of pretty much any autotools-based piece of
software:
$ autoreconf -i -f
$ ./configure
$ ./make check
# make install

The terminal-based test program is in tests/test_hpcalcs.

For now, the main external dependency is HIDAPI:
https://github.com/signal11/hidapi.git
Unless your Linux distro packages it, you need to compile and install it
yourself (it is also an autotools-based project).
The code base shall depend on libpng when screenshot color conversion is
implemented.

TODO list
---------
* ... hopefully attract _code_ contributors who have an actual HP Prime
  calculator (I don't) and have more free time than I do;
* a GUI, but I won't be the one doing it. Nowadays, Qt is the main choice for
  a portable, good-looking, fast UI toolkit. GTK+ used to be a better choice
  wrt. portability, but that was years ago, and in 2013, a number of
  applications and desktop environments are switching from GTK+ to Qt;
* add devices probing code (the hpcables part currently assumes that the
  calculator is plugged in and that there's a single calculator), HIDAPI
  provides some probing functions (e.g. based on vendor);
  Implementation notes:
  * in order to minimize API breakage if/when implementing OS upgrade is
    implemented, a data structure should be added for indicating what type of
    device we're dealing with. For instance:
struct cable_probing_info {
    cable_model cable; // HID and MSD will be different cables
    calc_model calc; // HID and MSD will probably be different calcs
    union info {
        struct usb_info {
            uint16_t usb_vid;
            uint16_t usb_pid;
            enum <...> device_mode; // indicating whether HID or MSD mode
        };
    };
};
* add 39gII support, probably, as the Prime is similar to the 39gII. That's
  where the usefulness of the cables / calcs separation and cables generic
  API will become most obvious.
  Implementation notes:
  * move the upper layer from prime_cmd into a new file called by both
    prime_cmd and the new file (like e.g. dusb_cmd in libticalcs).
  * the 39gII has 00 00 CRC.
* modify the way recv_backup works for more reliability.
  Implementation notes:
  * recv_backup should attempt to receive as much data as the calculator sends,
    and then split the received data. The main heuristic would be to assume
    that some packets were lost, and traverse backwards the contents of the
    current file to find a (00) F7 01 xx xx xx xx packet ? While this could
    fail in some circumstances, it should usually salvage more data.
  * recv_file shall probably be refactored as well;
  * Marcus Von Cube reported that when receiving a backup fails, the test
    program crashes:
"
hpcalcs INFO: prime_send_data: send remaining failed
hpcalcs ERROR: calc_prime_recv_backup: s_recv_backup failed
hpcalcs ERROR: hpcalcs_calc_recv_backup: recv_backup failed
hpfiles INFO: Displaying var entry 83EC8B55
hpfiles INFO: Name: 
"
* implement screenshot color conversion, with libpng;
* fill in torture test;
* somehow gain better knowledge of the protocol, so as to be able to...
* ... add more operations and data structures. 
* add dissectors and session logs, like in libticalcs;
* add support for Prime in fake MSD mode, for firmware upgrades ? I've
  already partially analyzed the protocol and published my notes at
  http://tiplanet.org/hpwiki/index.php?title=HP_Prime/Linking_Protocol
  but I'm not really confident about it ;)
  Need to find a library for MSD. libusbx does not recommend using it
  in MSD mode.
* certainly more... at least, if users and programmers think the software
  fits a purpose :-)

License
-------
Copyright (C) 2013 Lionel Debroux

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software Foundation,
Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA.

Changelog
---------
2013/11/03 - 2013/12/xx: improve logging, create install_hplp.sh, improve
error passing, fix bugs reported by more beta-testers, add more operations.
2013/10/22 - 2013/11/03: Created autotools-based project and test client;
vastly expand the code, to the point it becomes releasable (if not really
usable). First public announcement (limited scope).
2013/10/21: Split into multiple files, but still piggybacking hidtest.cpp.
2013/10/20: First public PoC.
2013/10/19: Project started.

Credits (demoscene style)
-------------------------
* _many_ thanks to Xavier "critor" Andréani for testing many program versions
  on his real Prime and providing many USB packet dumps (which I analyzed
  with Wireshark) and terminal output sessions;
* many thanks to Marcus Von Cube for providing USB packet dumps for the 39gII,
  which show that it's quite similar to the Prime;
* thanks to other beta-testers who reported bugs:
  * with the Prime: persalteas (Linux), wawachief (Linux & MacOS X), DJ
    Omnimaga (Windows), Adriweb (MacOS X, Windows);
  * with the 39gII: Marcus Von Cube;
* greetings to the other TI-Planet ( http://tiplanet.org/ ) admins;
* greetings to the HP Prime developer team at HP: some of its members spend
  time attending user message boards and interacting with users and programmers,
  even in communities traditionally interested in TI calcs (Omnimaga, Cemetech,
  TI-Planet), which is a win-win move for both HP and its users;
* fuckings to TI EdTech management imposing a closed-minded, lose-lose stance
  on the Nspire platform, despite repeated community input since 2007.
